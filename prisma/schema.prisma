// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// when "prisma generate" is run, it takes schema.prisma and generates a json schema (version 7) from it.
// We use the json schema to get the model's required fields that we need for our CREATE operations.
generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
  keepRelationFields    = "false"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  bookings       Booking[]
  reviews        Review[]
}

model Host {
  id             String     @id @default(uuid())
  username       String     @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  aboutMe        String
  listings       Property[]
}

model Property {
  id            String    @id @default(uuid())
  host          Host      @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostId        String
  title         String
  description   String
  location      String
  pricePerNight Decimal   @db.Decimal(10, 2)
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Int
  amenities     Amenity[]
  bookings      Booking[]
  reviews       Review[]
}

model Amenity {
  id         String     @id @default(uuid())
  name       String
  properties Property[]
}

model Booking {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Int
  bookingStatus  String
}

model Review {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId String
  rating     Int
  comment    String
}
